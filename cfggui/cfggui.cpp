// flipflip's cfggui
//
// Copyright (c) Philippe Kehl (flipflip at oinkzwurgl dot org),
// https://oinkzwurgl.org/hacking/ubloxcfg
//
// This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
// even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with this program.
// If not, see <https://www.gnu.org/licenses/>.

// This is a UBX, NMEA and RTCM3 message parser. It only parses the frames, not the content
// of the message (it does not decode any message fields).
// The parser will pass-through all data that is input. Unknown parts (other protocols,
// spurious data, incorrect messages, etc.) are output as GARBAGE type messages. GARBAGE messages
// are not guaranteed to be combined and can be split arbitrarily (into several GARBAGE messages).

#include <cstdio>
#include <vector>
#include <string>
#include <unistd.h>
#include <memory>
#include <regex>
#include <getopt.h>

#include "imgui.h"
#include "imgui_impl_glfw.h"
#include "imgui_impl_opengl3.h"
#include "implot.h"

// #if defined(IMGUI_IMPL_OPENGL_ES2)
// #  include <GLES2/gl2.h>
// #endif
#include "GL/gl3w.h"
#define GLFW_INCLUDE_GLCOREARB
#include <GLFW/glfw3.h>

#include <curl/curl.h>
#ifdef IMGUI_ENABLE_FREETYPE
#  include <ft2build.h>
#  include <freetype/freetype.h>
#endif

#include "ff_debug.h"
#include "config.h"
#include "platform.hpp"

#include "gui_app.hpp"
#include "gui_settings.hpp"

// Capture initial log output until GuiApp is taking over
static void sInitLog(const DEBUG_LEVEL_t level, const char *str, const DEBUG_CFG_t *cfg)
{
    GuiAppEarlyLog *earlyLog = static_cast<GuiAppEarlyLog *>(cfg->arg);
    earlyLog->Add(level, std::string(str));
    if (level > cfg->level)
    {
        return;
    }
    fputs(str, stderr);
}

static void sGlfwErrorCallback(int error, const char* description)
{
    ERROR("GLFW error %d: %s", error, description);
}

static int sWindowActivity; // boost framerate temporarily

static void sGlfwCursorPositionCallback(GLFWwindow *window, double xpos, double ypos)
{
    UNUSED(window);
    UNUSED(xpos);
    UNUSED(ypos);
    sWindowActivity = 10;
}

static void sGlfwMouseButtonCallback(GLFWwindow *window, int button, int action, int mods)
{
    UNUSED(window);
    UNUSED(button);
    UNUSED(action);
    UNUSED(mods);
    sWindowActivity = 20;
}

static void sGlfwScScrollCallback(GLFWwindow *window, double xoffset, double yoffset)
{
    UNUSED(window);
    UNUSED(xoffset);
    UNUSED(yoffset);
    sWindowActivity = 20;
}

static void sGlfwKeyCallback(GLFWwindow *window, int key, int scancode, int action, int mods)
{
    UNUSED(window);
    UNUSED(key);
    UNUSED(scancode);
    UNUSED(action);
    UNUSED(mods);
    sWindowActivity = 20;
}

#ifdef FF_BUILD_DEBUG
static void sGlHandleDebug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam)
{
    const char *sourceStr = "?";
    switch (source)
    {
        case GL_DEBUG_SOURCE_API:               sourceStr   = "API";                          break;
        case GL_DEBUG_SOURCE_WINDOW_SYSTEM:     sourceStr   = "WINDOW_SYSTEM";                break;
        case GL_DEBUG_SOURCE_SHADER_COMPILER:   sourceStr   = "SHADER_COMPILER";              break;
        case GL_DEBUG_SOURCE_THIRD_PARTY:       sourceStr   = "THIRD_PARTY";                  break;
        case GL_DEBUG_SOURCE_APPLICATION:       sourceStr   = "APPLICATION";                  break;
        case GL_DEBUG_SOURCE_OTHER:             sourceStr   = "OTHER";                        break;
    }
    const char *typeStr = "?";
    switch (type)
    {
        case GL_DEBUG_TYPE_ERROR:               typeStr     = "ERROR";                        break;
        case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: typeStr     = "DEPRECATED_BEHAVIOR";          break;
        case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:  typeStr     = "UNDEFINED_BEHAVIOR";           break;
        case GL_DEBUG_TYPE_PORTABILITY:         typeStr     = "PORTABILITY";                  break;
        case GL_DEBUG_TYPE_PERFORMANCE:         typeStr     = "PERFORMANCE";                  break;
        case GL_DEBUG_TYPE_MARKER:              typeStr     = "MARKER";                       break;
        case GL_DEBUG_TYPE_PUSH_GROUP:          typeStr     = "PUSH_GROUP";                   break;
        case GL_DEBUG_TYPE_POP_GROUP:           typeStr     = "POP_GROUP";                    break;
        case GL_DEBUG_TYPE_OTHER:               typeStr     = "OTHER";                        break;
    }
    const char *severityStr = "?";
    switch (severity)
    {
        case GL_DEBUG_SEVERITY_HIGH:            severityStr = "HIGH";                         break;
        case GL_DEBUG_SEVERITY_MEDIUM:          severityStr = "MEDIUM";                       break;
        case GL_DEBUG_SEVERITY_LOW:             severityStr = "LOW";                          break;
        case GL_DEBUG_SEVERITY_NOTIFICATION:    severityStr = "NOTIFICATION";                 break;
    }

    UNUSED(length);
    UNUSED(userParam);
    if ( (severity == GL_DEBUG_SEVERITY_MEDIUM) || (severity == GL_DEBUG_SEVERITY_HIGH) )
    {
        WARNING("GL (%s, %s, %s, %d) %s", sourceStr, typeStr, severityStr, id, message);
    }
    else
    {
        DEBUG("GL (%s, %s, %s, %d) %s", sourceStr, typeStr, severityStr, id, message);
    }
}
#endif

static const GLFWimage *appIcon();

int main(int argc, char **argv)
{
    GuiAppEarlyLog earlyLog;
    DEBUG_CFG_t debugCfg =
    {
#ifdef FF_BUILD_DEBUG
        .level  = DEBUG_LEVEL_DEBUG,
#else
        .level  = DEBUG_LEVEL_PRINT,
#endif
        .colour = isatty(fileno(stderr)) == 1,
        .mark   = NULL,
        .func   = sInitLog,
        .arg    = &earlyLog,
    };
    debugSetup(&debugCfg);

    /* ***** Command line arguments ********************************************************************************* */

    // TODO: this is not good enough yet
    std::string configName = "cfggui";
    bool argOk = true;
    while (true)
    {
        // Command line options
        static const struct option longOpts[] =
        {
            // clang-format off
            { "help",            no_argument,       NULL, 'h' },
            { "verbose",         no_argument,       NULL, 'v' },
            { "quiet",           no_argument,       NULL, 'q' },
            { "config",          required_argument, NULL, 'c' },
            { NULL, 0, NULL, 0 },
        };  // clang-format on
        const char* shortOpts = ":hvqc:";
        const char *usageHelp =
            "\n"
            "Usage:\n"
            "\n"
            "    cfggui [-v] [-q] [-c <name>]\n"
            "\n"
            "Where:\n"
            "\n"
            "    -v / -q             Increase / decrease verbosity\n"
            "    -c <name>           Config name to use (/^[a-z0-9]{3,20}$/, default: 'cfggui')\n"
            "\n";
            // Process all command line options
        int optIx = 0;
        const int opt = getopt_long(argc, argv, shortOpts, longOpts, &optIx);
        if (opt < 0)
        {
            break;
        }
        switch (opt)
        {
            case 'h':
                std::fputs(usageHelp, stdout);
                exit(EXIT_SUCCESS);
                break;
            case 'v':
#ifdef FF_BUILD_DEBUG
                debugCfg.level = DEBUG_LEVEL_TRACE;
#else
                debugCfg.level = DEBUG_LEVEL_DEBUG;
#endif
                break;
            case 'q':
                debugCfg.level = DEBUG_LEVEL_PRINT;
                break;
            case 'c':
                if (std::regex_match(optarg, std::regex("^[a-z0-9]{3,20}$")))
                {
                    configName = optarg;
                }
                else
                {
                    WARNING("Bad config name '%s'!", optarg);
                    argOk = false;
                }
                break;
            // Special getopt_long() cases
            case '?':
                WARNING("Invalid option '-%c'!", optopt);
                argOk = false;
                break;
            case ':':
                WARNING("Missing argument to option '-%c'!", optopt);
                argOk = false;
                break;
        }
    }
    debugSetup(&debugCfg);
    if (!argOk)
    {
        exit(EXIT_FAILURE);
    }

    if (!Platform::Init())
    {
        ERROR("Failed initialising stuff!");
        exit(EXIT_FAILURE);
    }

    Platform::WipeCache(Platform::CacheDir(), 365.25 / 4.0);

    /* ***** Setup low-level platform and renderer ****************************************************************** */

    int windowWidth  = 1280;
    int windowHeight = 768;
    int windowPosX   = -1;
    int windowPosY   = -1;
    const int   kWindowMinWidth  =  640;
    const int   kWindowMinHeight =  384;
    std::string windowTitle = Ff::Sprintf("cfggui " CONFIG_VERSION "-" CONFIG_GITHASH " (%s)"
#ifdef FF_BUILD_DEBUG
        " -- debug build"
#endif
        , configName.c_str());

    // We want to do some OpenGL stuff ourselves. Maybe.
    if (!gl3wInit())
    {
        ERROR("gl3wInit() fail!");
        exit(EXIT_FAILURE);
    }

    glfwSetErrorCallback(sGlfwErrorCallback);
    if (glfwInit() != GLFW_TRUE)
    {
        exit(EXIT_FAILURE);
    }

    // https://en.wikipedia.org/wiki/OpenGL_Shading_Language
// #if defined(IMGUI_IMPL_OPENGL_ES2)
//     // GL ES 2.0 + GLSL 100
//     const char *glsl_version = "#version 100";
//     glfwWindowHint(SDL_GL_CONTEXT_FLAGS, 0);
//     glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_ES_API);
//     glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
//     glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
//     const char *openGlVersion = "OpenGL ES 2.0, GLSL 1.00";
// #elif defined(_WIN32)
//     // GL 3.0 + GLSL 130
//     const char *char* glsl_version = "#version 130";
//     glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
//     glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
//     glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
//     const char *openGlVersion = "OpenGL 3.2, GLSL 1.30";
// ##elif defined(__APPLE__)
//     // GL 3.2 Core + GLSL 150
//     const char *glsl_version = "#version 150";
//     glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
//     glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);
//     glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
//     glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE); // Always required on Mac
//     const char *openGlVersion = "OpenGL 3.2, GLSL 1.50";
// #else
    // GL 3.3 + GLSL 330
    const char *glsl_version = "#version 330";
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_DOUBLEBUFFER, GLFW_TRUE);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE);
    const char *openGlVersion = "OpenGL 3.3, GLSL 3.30";
// #endif

#ifdef FF_BUILD_DEBUG
    glfwWindowHint(GLFW_OPENGL_DEBUG_CONTEXT, GLFW_TRUE);
#endif
    glfwWindowHint(GLFW_SAMPLES, 4);

    // Create window with graphics context
    GLFWwindow *window = glfwCreateWindow(windowWidth, windowHeight, windowTitle.c_str(), NULL, NULL);
    if (window == NULL)
    {
        glfwTerminate();
        return EXIT_FAILURE;
    }
    glfwMakeContextCurrent(window);
    glfwSwapInterval(1); // Enable vsync
    glfwSetWindowSizeLimits(window, kWindowMinWidth, kWindowMinHeight, GLFW_DONT_CARE, GLFW_DONT_CARE);
    glfwSetWindowIcon(window, 1, appIcon());

    // User activity detection, for frame rate control
    glfwSetCursorPosCallback(window, sGlfwCursorPositionCallback);
    glfwSetMouseButtonCallback(window, sGlfwMouseButtonCallback);
    glfwSetScrollCallback(window, sGlfwScScrollCallback);
    glfwSetKeyCallback(window, sGlfwKeyCallback);

#ifdef FF_BUILD_DEBUG
    glDebugMessageCallback(sGlHandleDebug, nullptr);
    //glDebugMessageCallbackARB(sGlHandleDebug, nullptr);
    //glEnable(GL_DEBUG_OUTPUT);
    glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);
#endif

    // Setup Dear ImGui context
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImPlot::CreateContext();

    ImGuiIO &io = ImGui::GetIO();

    // Enable these early, the rest is in GuiSettings::Init();
    io.ConfigFlags |= ImGuiConfigFlags_DockingEnable;
    //io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable; // FIXME: will need more work, see example (ImGui::UpdatePlatformWindows() etc.)

    // Setup Platform/Renderer bindings
    ImGui_ImplGlfw_InitForOpenGL(window, true);
    ImGui_ImplOpenGL3_Init(glsl_version);

    // Initialise and load settings
    GuiSettings::Init(configName);
    GuiSettings::LoadConf();


    /* ***** Create application ************************************************************************************* */

    // Collect some version infos
    std::vector<std::string> versionInfos;
    versionInfos.push_back(Ff::Sprintf("cfggui/ff/ubloxcfg %s (%d.%d), %s, %s %s",
        CONFIG_VERSION, CONFIG_VERSION_MAJOR, CONFIG_VERSION_MINOR, CONFIG_GITHASH, CONFIG_DATE, CONFIG_TIME));
    versionInfos.push_back(openGlVersion);
    versionInfos.push_back(Ff::Sprintf("GLFW %s", glfwGetVersionString()));
    versionInfos.push_back(Ff::Sprintf("ImGui %s (%d)"
#ifdef IMGUI_HAS_DOCK
        " (Docking branch)"
#endif
        " (%s, %s)", ImGui::GetVersion(), IMGUI_VERSION_NUM,
        io.BackendPlatformName ? io.BackendPlatformName : "?",
        io.BackendRendererName ? io.BackendRendererName : "?"));
    versionInfos.push_back("ImPlot " IMPLOT_VERSION);
    versionInfos.push_back(Ff::Sprintf("libcurl %s", curl_version()));
#ifdef IMGUI_ENABLE_FREETYPE
    versionInfos.push_back("FreeType " STRINGIFY(FREETYPE_MAJOR) "." STRINGIFY(FREETYPE_MINOR) "." STRINGIFY(FREETYPE_PATCH));
#endif
    versionInfos.push_back("GCC " STRINGIFY(__GNUC__) "." STRINGIFY(__GNUC_MINOR__) "." STRINGIFY(__GNUC_PATCHLEVEL__)
        " C++ " STRINGIFY(__cplusplus));
    versionInfos.push_back(Ff::Sprintf("GPU: %s %s %s (GLSL %s)",
        (const char *)glGetString(GL_VENDOR),
        (const char *)glGetString(GL_RENDERER),
        (const char *)glGetString(GL_VERSION),
        (const char *)glGetString(GL_SHADING_LANGUAGE_VERSION)));

    for (const auto &info: versionInfos)
    {
        DEBUG("%s", info.c_str());
    }

    bool done = false;
    std::unique_ptr<GuiApp> app = nullptr;
    try
    {
        app = std::make_unique<GuiApp>(earlyLog, versionInfos);
        earlyLog.Clear();
        versionInfos.clear();
    }
    catch (std::exception &e)
    {
        ERROR("gui init fail: %s", e.what());
        done = true;
    }

    // Restore previous window geometry
    if (app)
    {
        std::string geometry = GuiSettings::GetValue("Cfggui.geometry");
        int w, h, x, y;
        if (std::sscanf(geometry.c_str(), "%d,%d,%d,%d", &w, &h, &x, &y) == 4)
        {
            if ( (x >= 0) && (y >= 0) )
            {
                glfwSetWindowPos(window, x, y);
            }
            if (( w >= kWindowMinWidth) && (h >= kWindowMinHeight) )
            {
                glfwSetWindowSize(window, w, h);
            }
        }
    }

    /* ***** main loop ********************************************************************************************** */

    // Main loop
    uint32_t lastDraw = 0;
    uint32_t lastMark = 0;
    while (!done)
    {
        glfwPollEvents();

        uint32_t now = TIME();
        const uint32_t markInterval = 10000;
        if ((now - lastMark) >= markInterval)
        {
            DEBUG("----- MARK -----");
            lastMark = ((now + (markInterval / 2 )) / markInterval) * markInterval;
        }

        if ( (sWindowActivity > 0) || ((int)(now - lastDraw) >= (1000 / GuiSettings::minFrameRate)) )
        {
            lastDraw = now;
            sWindowActivity--;

            app->PerfTic(GuiApp::Perf_e::TOTAL);
            app->PerfTic(GuiApp::Perf_e::NEWFRAME);

            // Update fonts if necessary
            if (GuiSettings::UpdateFonts())
            {
                //ImGui_ImplOpenGL3_DestroyDeviceObjects();
                //ImGui_ImplOpenGL3_CreateDeviceObjects();
                ImGui_ImplOpenGL3_DestroyFontsTexture();
                ImGui_ImplOpenGL3_CreateFontsTexture();
            }

            // Start the Dear ImGui frame
            ImGui_ImplOpenGL3_NewFrame();
            ImGui_ImplGlfw_NewFrame();
            ImGui::NewFrame();
            GuiSettings::UpdateSizes();

            app->PerfToc(GuiApp::Perf_e::NEWFRAME);

            // Do things
            app->PerfTic(GuiApp::Perf_e::LOOP);
            app->Loop(ImGui::GetFrameCount(), ImGui::GetTime());
            app->PerfToc(GuiApp::Perf_e::LOOP);

            // Compose the frame
            app->PerfTic(GuiApp::Perf_e::DRAW);
            app->DrawFrame();
            app->PerfToc(GuiApp::Perf_e::DRAW);

            // Confirm close modal
            if (glfwWindowShouldClose(window))
            {
                bool wantClose = true;
                app->ConfirmClose(wantClose, done);
                glfwSetWindowShouldClose(window, wantClose);
            }

            // Render
            app->PerfTic(GuiApp::Perf_e::RENDER_IM);
            //ImGui::EndFrame();
            ImGui::Render();
            app->PerfToc(GuiApp::Perf_e::RENDER_IM);
            app->PerfTic(GuiApp::Perf_e::RENDER_GL);
            glViewport(0, 0, (int)io.DisplaySize.x, (int)io.DisplaySize.y);
            const auto c = app->BackgroundColour();
            glClearColor(c.x, c.y, c.z, 1.0f);
            glClear(GL_COLOR_BUFFER_BIT);
#if (GLFW_VERSION_MAJOR >= 3) && (GLFW_VERSION_MINOR >= 3)
            glfwSetWindowOpacity(window, c.w < 0.2f ? 0.2f : c.w);
#endif
            ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
            app->PerfToc(GuiApp::Perf_e::RENDER_GL);
            app->PerfToc(GuiApp::Perf_e::TOTAL);

            glfwSwapBuffers(window);
            //SLEEP(15);
            //glFlush();
        }
        else
        {
            SLEEP(5);
        }
    }

    if (app)
    {
        // Save window geometry
        glfwGetWindowSize(window, &windowWidth, &windowHeight);
        glfwGetWindowPos(window, &windowPosX, &windowPosY);
        GuiSettings::SetValue("Cfggui.geometry", Ff::Sprintf("%d,%d,%d,%d", windowWidth, windowHeight, windowPosX, windowPosY));

        // Tear down
        app = nullptr;
    }

    DEBUG("Adios!");

    // Save settings
    GuiSettings::SaveConf();


    /* ***** Cleanup ************************************************************************************************ */

    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImPlot::DestroyContext();
    ImGui::DestroyContext();

    glfwDestroyWindow(window);
    glfwTerminate();

    return EXIT_SUCCESS;
}

static const GLFWimage *appIcon()
{
    // cfggui/appicon.png -> https://convertio.co/png-rgba/ -> xxd -i
    static const uint8_t icon[] =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x72, 0xa1, 0x26, 0x00, 0x70, 0x9e, 0x89, 0x00, 0x6f, 0x9f, 0xc7,
        0x00, 0x6f, 0x9f, 0xdd, 0x00, 0x6f, 0x9f, 0xcc, 0x00, 0x6f, 0xa0, 0x96,
        0x00, 0x6f, 0x9e, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x6e, 0xa1, 0x41, 0x00, 0x6f, 0xa0, 0x9e, 0x00, 0x6f, 0x9e, 0xce,
        0x00, 0x6f, 0x9f, 0xdc, 0x00, 0x6f, 0xa0, 0xc3, 0x00, 0x6f, 0x9e, 0x81,
        0x00, 0x6f, 0xa2, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x01, 0x00, 0x70, 0x9f, 0x80, 0x00, 0x6f, 0x9f, 0xfa,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9e, 0xa1, 0x00, 0x71, 0xaa, 0x09, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x70, 0x9f, 0x10, 0x00, 0x6f, 0x9e, 0xb1, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xf5,
        0x00, 0x6e, 0x9f, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x9f, 0x9f,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9e, 0xc6, 0x00, 0x60, 0x9f, 0x08, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0xa5, 0x11, 0x00, 0x6f, 0x9f, 0xd5,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x6e, 0x9f, 0x6d, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x70, 0x9f, 0xb0, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6e, 0xa0, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0xa4, 0x0e, 0x00, 0x6f, 0x9f, 0xee,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xfd,
        0x00, 0x6f, 0x9d, 0x27, 0x00, 0x6f, 0x9d, 0x3c, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x70, 0x9f, 0xe0,
        0x00, 0x80, 0xaa, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x6e, 0x9e, 0x5f, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0x87,
        0x00, 0x70, 0x9f, 0xa2, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x70, 0xa1, 0x49,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x9f, 0x9f,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xc7, 0x00, 0x6f, 0x9f, 0xe6,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0x87, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x9f, 0xbc, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xe7, 0x00, 0x6f, 0x9f, 0xfe, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0xa0, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x6f, 0x9f, 0xb8, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x70, 0x9f, 0xa0,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x9f, 0x95,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6e, 0x9f, 0x7d, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x9f, 0x40, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xfe,
        0x00, 0x70, 0xa2, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x9f, 0xbd, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x70, 0x9e, 0xa9, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x73, 0x99, 0x14, 0x00, 0x6f, 0x9f, 0xdd, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xd1,
        0x00, 0x6a, 0x95, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x74, 0xa2, 0x16, 0x00, 0x6e, 0xa0, 0xbb, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xac, 0x00, 0x77, 0x99, 0x0f, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x80, 0x80, 0x02, 0x00, 0x6f, 0xa0, 0x73, 0x00, 0x6f, 0x9f, 0xf6,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xef, 0x00, 0x6f, 0xa0, 0x63, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x9c, 0x24, 0x00, 0x6f, 0x9f, 0xc5,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xb5, 0x00, 0x70, 0xa3, 0x19,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x03, 0x00, 0x6f, 0xa0, 0x7e,
        0x00, 0x6f, 0x9f, 0xfc, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xf8, 0x00, 0x70, 0xa0, 0x6b,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x9e, 0x44,
        0x00, 0x6f, 0xa0, 0xeb, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xe1,
        0x00, 0x71, 0x9d, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x9e, 0x22,
        0x00, 0x6f, 0x9f, 0xd8, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6e, 0x9f, 0xc9, 0x00, 0x74, 0xa2, 0x16, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x9c, 0x12,
        0x00, 0x6f, 0x9f, 0xcd, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xba, 0x00, 0x66, 0x99, 0x0a,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0xa5, 0x11,
        0x00, 0x70, 0x9f, 0xd0, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xbc,
        0x00, 0x60, 0x9f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x9d, 0x1a,
        0x00, 0x6f, 0xa0, 0xe3, 0x00, 0x6f, 0x9f, 0xff, 0x00, 0x6f, 0x9f, 0xff,
        0x00, 0x6f, 0x9f, 0xd2, 0x00, 0x6d, 0xa4, 0x0e, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xa0, 0x3b,
        0x00, 0x6f, 0xa0, 0xfb, 0x00, 0x6f, 0x9f, 0xf2, 0x00, 0x6e, 0x9f, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x9e, 0x89,
        0x00, 0x70, 0x9e, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xaa, 0x09, 0x00, 0x80, 0x80, 0x02,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    };
    static const GLFWimage image =
    {
        .width = 32,
        .height = 32,
        .pixels = (unsigned char *)icon
    };
    return &image;
}
